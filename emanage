#!/usr/bin/python
# (c) James Laird-Wah 2015
# This file is in the public domain.

import ecommand
import estatus
import minisnmp
import sys
import time

import optparse
parser = optparse.OptionParser(usage="%prog [options] PRINTERIP", epilog="""
This tool is for checking and cleaning nozzles on the Epson Stylus Pro x900
11-cartridge printers, via a network connection.

The return value is zero only if no problems are indicated. A nozzle check failure 
results in return code 100. Other codes indicate network problems or bugs.
""")
ink_choices = [x[0] for x in estatus.nozzle_colours]
parser.add_option("-k", "--clean", help="Clean a nozzle (and others in its group). One of " + ','.join(ink_choices) + '.', choices=ink_choices, metavar="COLOUR")
parser.add_option("-P", "--power", help='Do a power clean. Default is normal clean.', action='store_true')
parser.add_option("-c", "--check", help="Run a nozzle check.", action='store_true')
parser.add_option("-v", "--verbose", help="Print additional information during the run.", action='store_true')
(options, args) = parser.parse_args()
if len(args) != 1:
    parser.error("You need to specify the printer hostname or IP")
printer = args[0]

def fetch_status(printer):
    return estatus.StatusParser(minisnmp.get_status(printer))

def wait_busy(printer):
    if options.verbose:
        print "Waiting for printer to start..."
    while True:
        status = fetch_status(printer)
        if not status.ready:
            return
        time.sleep(1)

def wait_idle(printer):
    while True:
        status = fetch_status(printer)
        if options.verbose:
            print "Status:", status.statustext
        if status.ready:
            return
        time.sleep(5)

status = fetch_status(printer)
if options.verbose:
    print "Printer status:", status.statustext
if not status.ready:
    print "Printer not ready."
    sys.exit(1)

premote = ecommand.ESCRemotePrinter(printer)

if not (options.clean or options.check):
    print "Nothing to do."
    sys.exit(0)

if options.clean:
    premote.start_remote()
    premote.start_job("Nozzle cleaning")
    for nc in estatus.nozzle_colours:
        if nc[0] == options.clean:
            group_id = nc[2]
            break
    print "Cleaning nozzles %s..." % estatus.nozzle_groups[group_id]
    premote.group_clean(group_id, options.power)
    premote.end_job()
    premote.end_remote()
    wait_busy(printer)
    wait_idle(printer)

if options.check:
    premote.start_remote()
    premote.start_job("Nozzle check")
    premote.nozzle_check()
    premote.end_job()
    premote.end_remote()
    wait_busy(printer)
    wait_idle(printer)

blocked = estatus.parse_nozzlecheck(minisnmp.get_nozzlecheck(printer))
if any(blocked):
    blocked_names = estatus.nozzlecheck_lookup(blocked, 0)
    print "Blocked:", ", ".join(blocked_names)
    sys.exit(100)
else:
    print "Nozzles OK"
